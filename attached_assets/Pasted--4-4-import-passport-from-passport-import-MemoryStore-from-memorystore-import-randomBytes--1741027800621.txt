-4
+4
import passport from 'passport';
import MemoryStore from 'memorystore';
import { randomBytes } from 'crypto';
import { createServer as createNetServer } from 'net';
import { execSync } from 'child_process';
const PORT = 5000; // Force port 5000
//import { createServer as createNetServer } from 'net'; // Removed unnecessary import
//import { execSync } from 'child_process'; // Removed unnecessary import
const PORT = 5000;
const HOST = '0.0.0.0';
const isDevelopment = process.env.NODE_ENV === "development";
-2
+1
(async () => {
  try {
    console.log('[Server] Starting initialization process...');
    console.log('[Server] Setting NODE_ENV to development');
    process.env.NODE_ENV = 'development';
    console.log('[Server] Starting initialization process...');
    // Test database connection
    try {
-73
+1
      await db.query.users.findFirst();
      console.log('[Database] Connection successful');
    } catch (dbError) {
      console.error('[Database] Connection failed:', {
        error: dbError instanceof Error ? dbError.message : dbError,
        timestamp: new Date().toISOString()
      });
      console.error('[Database] Connection failed:', dbError);
      throw dbError;
    }
    console.log('[Server] Creating HTTP server and registering routes...');
    const server = registerRoutes(app);
    // Check if port is available
    const isPortAvailable = await new Promise((resolve) => {
      const testServer = createNetServer()
        .once('error', () => resolve(false))
        .once('listening', () => {
          testServer.close();
          resolve(true);
        })
        .listen(PORT, HOST);
    });
    if (!isPortAvailable) {
      console.log('[Server] Port 5000 is in use. Attempting cleanup...');
      try {
        execSync(`lsof -i :${PORT} | grep LISTEN | awk '{print $2}' | xargs -r kill -9 2>/dev/null || true`);
        console.log('[Server] Executed lsof cleanup command');
      } catch (e) {
        console.log('[Server] lsof cleanup attempt failed:', e);
      }
      try {
        execSync(`fuser -k ${PORT}/tcp 2>/dev/null || true`);
        console.log('[Server] Executed fuser cleanup command');
      } catch (e) {
        console.log('[Server] fuser cleanup attempt failed:', e);
      }
      console.log('[Server] Waiting for port to be released...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      // Verify port availability after cleanup
      const portAvailableAfterCleanup = await new Promise((resolve) => {
        const testServer = createNetServer()
          .once('error', () => resolve(false))
          .once('listening', () => {
            testServer.close();
            resolve(true);
          })
          .listen(PORT, HOST);
      });
      console.log('[Server] Port availability after cleanup:', portAvailableAfterCleanup);
    }
    if (isDevelopment) {
      console.log('[Server] Setting up Vite development server...');
      await setupVite(app, server);
    } else {
      try {
        console.log('[Server] Setting up static file serving...');
        serveStatic(app);
      } catch (error) {
        console.log('[Server] Falling back to Vite development server...');
        await setupVite(app, server);
      }
    }
  // Catch-all route for undefined API endpoints - placed after all routes are registered
  app.all('/api/*', (req: Request, res: Response) => {
    console.log(`Catching undefined API route: ${req.path}`);
    res.status(404).json({
      message: 'API endpoint not found',
      path: req.path,
      method: req.method,
      timestamp: new Date().toISOString()
    });
  });
    server.listen(PORT, HOST, () => {
      console.log(`[${new Date().toISOString()}] Server listening on http://${HOST}:${PORT}`);
